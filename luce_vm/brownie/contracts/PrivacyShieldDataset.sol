// SPDX-License-Identifier: AFL-3.0
pragma solidity >=0.7.0 <0.9.0;

import "./Commitment.sol";
import "./DataSet.sol";

contract PrivacyShieldDataset is Dataset, Commitment {
    // The user holds the secret, each time the user wants to update the dataset, the user must provide the proof.
    // The proof is generated by the user using the secret and nonce
    // The nonce is updated (+1, for example) each time the user updates the dataset
    // Each time the user updates the dataset, the user must update the commitment
    uint256 nonce;

    constructor(
        IVerifier _verifier,
        uint256[] memory _commitment
    ) Commitment(_verifier, _commitment) {}

    function getCommitment(
        bytes memory _proof
    ) public onlyVerified(_proof) returns (uint256[] memory) {
        return commitment;
    }
}
